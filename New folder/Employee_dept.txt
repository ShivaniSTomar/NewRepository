package com.app.pojos;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;

@MappedSuperclass
public class BaseEntity {
	
		@Id 
		@GeneratedValue(strategy = GenerationType.IDENTITY) 
		// => auto increment
		@Column(name="id")
		private Long id;

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}
		
		
		
}
=========================================================================
package com.app.pojos;
/*
 * emp_id(PK) ,first_name,last_name,email(unique)
password(not null),join_date,emp_type(full_time/part_time/contract...:enum),salary


 */

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

@Entity // mandatory
@Table(name = "emps")
public class Employee extends BaseEntity{
	@Column(name="first_name",length = 30)//varchar(30)
	private String firstName;
	@Column(name="last_name",length = 30)//varchar(30)
	private String lastName;
	@Column(length = 30,unique = true)//varchar(30) , unique 
	private String email;
	@Column(length = 20,nullable = false)//NOT NULL constraint
	private String password;
//	@Transient //skip from persistence (i.e no col will be generated)
//	private String confirmPassword;
	@Column(name="join_date")
	private LocalDate joinDate;
	@Enumerated(EnumType.STRING) //col type : varchar : to store enum const names
	@Column(length = 30,name="emp_type")
	private EmploymentType empType;
	private double salary;//auto adds NOT NULL constraint
	//Emp *--->1 Dept 
	@ManyToOne(fetch = FetchType.LAZY)//mandatory anno for specifying many--> one asso.
	@JoinColumn(name="dept_id")//optional BUT reco.
	private Department myDept;
	//many to many Employee *---->* Project , inverse side
	@ManyToMany(mappedBy = "employees")
	private Set<Project> projects=new HashSet<>();
	//entity --> composite val type
	private AdhaarCard card;

	public Employee() {
		System.out.println("in def ctor of emp");
	}

	public Employee(String firstName, String lastName, String email, String password, LocalDate joinDate,
			EmploymentType empType, double salary) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.joinDate = joinDate;
		this.empType = empType;
		this.salary = salary;
	}
	

	public Employee(String firstName, String lastName, double salary) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.salary = salary;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public LocalDate getJoinDate() {
		return joinDate;
	}

	public void setJoinDate(LocalDate joinDate) {
		this.joinDate = joinDate;
	}

	public EmploymentType getEmpType() {
		return empType;
	}

	public void setEmpType(EmploymentType empType) {
		this.empType = empType;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	public Department getMyDept() {
		return myDept;
	}

	public void setMyDept(Department myDept) {
		this.myDept = myDept;
	}
	
	

	public Set<Project> getProjects() {
		return projects;
	}

	public void setProjects(Set<Project> projects) {
		this.projects = projects;
	}
	

	public AdhaarCard getCard() {
		return card;
	}

	public void setCard(AdhaarCard card) {
		this.card = card;
	}

	@Override
	public String toString() {
		return "Employee ID "+getId()+" [firstName=" + firstName + ", lastName=" + lastName + ", email=" + email + ", joinDate="
				+ joinDate + ", empType=" + empType + ", salary=" + salary + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!(obj instanceof Employee))
			return false;
		Employee other = (Employee) obj;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		return true;
	}
	
}
=========================================================================
package com.app.pojos;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.Table;

@Entity
@Table(name = "departments")
public class Department extends BaseEntity {
	@Column(length = 30, unique = true)
	private String name;
	@Column(length = 60)
	private String location;
	// + association property
	// Dept 1--->* Emps
	@OneToMany(mappedBy = "myDept",cascade = CascadeType.ALL,
			orphanRemoval = true/* ,fetch=FetchType.EAGER */) // mandatory o.w : hib throws MappingExc.
	private List<Employee> employees = new ArrayList<>();

	public Department() {
		// TODO Auto-generated constructor stub
	}

	public Department(String name, String location) {
		super();
		this.name = name;
		this.location = location;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public List<Employee> getEmployees() {
		return employees;
	}

	public void setEmployees(List<Employee> employees) {
		this.employees = employees;
	}

	@Override
	public String toString() {
		return "Department id "+getId()+"  [name=" + name + ", location=" + location + "]";
	}

	// add helper method to establish a bi dir asso between entities
	public void addEmployee(Employee e) {
		employees.add(e);//Dept --> Emp
		e.setMyDept(this);//Emp --> Dept
	}

	// add helper method to de link a bi dir asso between entities
	public void removeEmployee(Employee e) {
		employees.remove(e);
		e.setMyDept(null);
	}

}
=========================================================================
package com.app.dao;

import java.util.List;

import com.app.pojos.Employee;

public interface EmployeeDao {
	List<Employee> getAllEmps();
}

=========================================================================
package com.app.dao;

import java.util.List;

import javax.persistence.EntityManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.app.pojos.Employee;

@Repository
public class EmployeeDaoImpl implements EmployeeDao {
	//dep : 
	@Autowired //byType OR @PersistenceContext : JPA anno
	private EntityManager mgr;//super i/f of Hibernate Session

	@Override
	public List<Employee> getAllEmps() {
		String jpql="select e from Employee e";// e join fetch e.myDept";
		return mgr
				.createQuery(jpql, Employee.class)
				.getResultList();
	}

}

=========================================================================
package com.app.service;

import java.util.List;

import com.app.pojos.Employee;

public interface EmployeeService {
	List<Employee> listEmps();
}

=========================================================================
package com.app.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.dao.EmployeeDao;
import com.app.pojos.Employee;

@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService {
	//dep
	@Autowired
	private EmployeeDao empDao;

	@Override
	public List<Employee> listEmps() {
		// TODO Auto-generated method stub
		List<Employee> emps = empDao.getAllEmps();
		emps.forEach(e -> e.getMyDept().getName());
		return emps;
	}

}
=========================================================================
package com.app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomePageController {
	public HomePageController() {
		System.out.println("in ctor of "+getClass());
	}
	//add req handling method to render index page
	@GetMapping("/") //=@RequestMapping(method=GET) =>doGet
	public String showHomePage() {
		System.out.println("in show home page");
		return "/index";//AVN : /WEB-INF/views/index.jsp
	}

}
=========================================================================
package com.app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller //singleton n eager
public class HelloController {
	public HelloController() {
		System.out.println("in ctor of"+getClass());
	}
	//add req handling method : for saying hello 
	@RequestMapping("/hello")
	//key : /hello 
	//value : HelloController.sayHello1
	public String sayHello1()
	{
		System.out.println("in say hello1");
		return "/display";//Handler rets LVN --> D.S --> sends LVN -->
		//V.R --> AVN : /WEB-INF/views/display.jsp		
	}

}
=========================================================================
package com.app.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.app.service.EmployeeService;

@Controller
@RequestMapping("/emps")
public class EmployeeController {
	//dep : 
	@Autowired//(required = true)
	private EmployeeService empService;
	
	public EmployeeController() {
		System.out.println("in ctor of " + getClass());
	}
	// add a req handling method to send list of emps from handler --> D.S , using
	// ModelAttrs : using Model map
	@GetMapping("/list")
	public String listEmps(Model map)
	{
		System.out.println("in list emps");
		map.addAttribute("emp_list",empService.listEmps());
		return "/emps/list";//AVN : /WEB-INF/views/emps/list.jsp
		//impl : model map 
	}
}
=========================================================================
