==============================================================================
1.Product Entity:
==============================================================================
// Product.java
@Entity
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name cannot be blank")
    private String name;

    @NotBlank(message = "Product Code cannot be blank")
    @Column(unique = true)
    private String productCode;

    @NotBlank(message = "Date of manufacturing cannot be blank")
    private String dateOfManufacturing;

    @Enumerated(EnumType.STRING)
    private Category category;

    // getters and setters
}
==============================================================================
2.Catagory Enum:
==============================================================================
// Category.java
public enum Category {
    FASHION,
    ELECTRONICS
}
==============================================================================
3.Product Repository: 
==============================================================================
// ProductRepository.java
public interface ProductRepository extends JpaRepository<Product, Long> {
    Optional<Product> findByProductCode(String productCode);
}
==============================================================================
4.Product Service:
==============================================================================
// ProductService.java
public interface ProductService {
    ResponseEntity<Object> createProduct(Product product);
    ResponseEntity<Object> getProduct(Long productId);
}
==============================================================================
5.Product Service Implementation:
==============================================================================
// ProductServiceImpl.java
@Service
public class ProductServiceImpl implements ProductService {
    @Autowired
    private ProductRepository productRepository;

    @Override
    public ResponseEntity<Object> createProduct(Product product) {
        try {
            // Check if the product with the given product code already exists
            if (productRepository.findByProductCode(product.getProductCode()).isPresent()) {
                return ResponseEntity.status(HttpStatus.CONFLICT).body("Product with the given product code already exists");
            }

            Product savedProduct = productRepository.save(product);
            URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                    .buildAndExpand(savedProduct.getId()).toUri();

            return ResponseEntity.created(location).body(savedProduct);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to create product");
        }
    }

    @Override
    public ResponseEntity<Object> getProduct(Long productId) {
        Optional<Product> product = productRepository.findById(productId);

        if (product.isPresent()) {
            return ResponseEntity.ok(product.get());
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product not found");
        }
    }
}
==============================================================================
6.Product Controller:
==============================================================================
// ProductController.java
@RestController
@RequestMapping("/products")
public class ProductController {
    @Autowired
    private ProductService productService;

    @PostMapping
    public ResponseEntity<Object> createProduct(@RequestBody Product product) {
        return productService.createProduct(product);
    }

    @GetMapping("/{productId}")
    public ResponseEntity<Object> getProduct(@PathVariable Long productId) {
        return productService.getProduct(productId);
    }
}
==============================================================================